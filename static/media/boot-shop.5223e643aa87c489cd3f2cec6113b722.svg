<?xml version="1.0" encoding="UTF-8"?>
<svg width="210mm" height="297mm" version="1.1" viewBox="0 0 210 297" xmlns="http://www.w3.org/2000/svg">
<rect transform="scale(-1,1)" x="-210.48" y="113.83" width="210.48" height="183.05" ry="0" fill="#5fbcd3" stroke-width=".7863"/>
<path d="m38.492 149.15c-0.4862-5.2944 0.71557-10.819 0-16.082-1.5535-11.427-4.4845-22.626-6.4227-33.994-4.6931-27.526-1.5676-11.951-5.0237-37.054-0.35505-2.5789-1.1691-5.0905-1.397-7.6837-0.35377-4.0257-0.47732-14.764 0.55232-19.035 0.14585-0.60488 2.1913-3.819 2.6885-4.2926 1.0619-1.0116 2.503-1.6082 3.456-2.723 1.1755-1.375 1.2693-3.2877 2.6032-4.6216" fill="none" stroke-width=".26458"/>
<path d="m37.069 156.04c-0.13882-0.28991-0.30694-0.56754-0.41647-0.86974-0.96444-2.6609-1.2836-5.8556-1.5761-8.6643-0.41585-5.7746-0.39215-11.572-0.42446-17.359-0.0047-1.3752-0.01082-2.7504-0.01421-4.1257-0.0046-1.8724-0.0031-7.6074-0.03563-9.2787-0.1119-5.7596-0.46174-11.511-0.77227-17.262-0.23655-6.3525-0.79291-12.694-0.97128-19.049-0.09049-3.224-0.024-3.8098 0.08126-6.973 0.20952-4.7694 1.2525-9.44 3.0145-13.872 0.30998-0.77982 0.67448-1.5369 1.0117-2.3053 0.86948-1.8813 1.8631-3.7024 3.0683-5.3908 0.66168-0.92693 1.3134-1.7813 2.1917-2.5173 0.4859-0.40712 1.0312-0.73758 1.5468-1.1064 5.8343-3.0987 12.449-4.1325 18.898-5.1447 7.1012-1.0845 14.274-1.5567 21.447-1.8186 3.2973 0.01439 6.7062-0.19429 9.8899 0.85466 2.5982 0.85605 3.3913 1.5091 5.8587 2.941 0.25094 0.26204 0.46876 0.56043 0.75284 0.78613 6.4495 5.124 2.0678 1.0855 8.6635 6.9569 4.4405 3.9528 8.5381 8.2183 12.622 12.531 4.7365 5.2979 9.2232 10.831 13.336 16.629 2.4185 3.4097 3.0255 4.428 5.264 7.8907 4.3804 6.583 7.478 13.874 10.366 21.2 2.7743 6.9334 4.8342 14.115 7.1156 21.217 1.7179 5.3407 3.3713 10.704 4.6494 16.169 1.0765 4.5669 1.661 9.2181 2.1511 13.877l3.3927 1.6823c-0.5312-4.6743-1.0855-9.3487-2.1689-13.935-1.2539-5.5083-3.0015-10.88-4.7471-16.249-2.2855-7.1103-4.3518-14.301-7.1221-21.245-2.8826-7.3673-5.9786-14.701-10.407-21.297-2.0635-3.1818-3.0666-4.7985-5.2801-7.92-4.1317-5.8265-8.6728-11.365-13.409-16.707-8.4535-8.9345-17.166-17.787-27.993-23.863-2.5555-1.4478-3.3386-2.0939-6.0228-2.9324-3.2013-1.0001-6.6129-0.76209-9.9133-0.74866-7.1523 0.29881-14.299 0.86825-21.384 1.9152-6.541 1.0093-13.237 2.0679-19.168 5.1716-0.53574 0.38219-1.1047 0.7216-1.6072 1.1466-0.85526 0.72334-1.5752 1.6828-2.2099 2.5929-1.1989 1.7191-2.1807 3.5722-3.042 5.4804-0.33852 0.77752-0.70434 1.5437-1.0155 2.3326-1.7665 4.4778-2.8122 9.1956-3.0007 14.011-0.08671 3.0143-0.16272 3.9624-0.04561 7.0253 0.0502 1.3129 0.1573 2.623 0.23731 3.9344 0.30899 5.065 0.64904 10.128 0.89528 15.197 0.18206 3.2108 0.48998 8.3287 0.59904 11.527 0.21639 6.345 0.03212 12.691 0.06366 19.038-0.0095 5.7642-0.11951 11.539 0.2164 17.296 0.28402 2.8301 0.65131 6.0075 1.4514 8.736 0.0902 0.30761 0.23216 0.59762 0.34824 0.89642l3.614 1.6011z" fill="none" stroke-width=".26458"/>
<path d="m153.1 30.886c0.1799 0.79756 0.33913 1.6001 0.5397 2.3927 1.0146 4.0095 2.1512 7.9875 3.1716 11.996 0.86357 3.3922 1.7121 6.7883 2.535 10.191 2.1954 9.0767 3.1605 13.511 5.2274 22.659 3.7271 16.792 7.3973 33.6 11.555 50.292 1.1055 4.4844 2.2476 8.9765 2.8653 13.56 0.20612 1.593 0.19694 3.2003 0.18579 4.803 0.17482 1.808 0.43342 3.603 0.56594 5.4157 0.015 0.25806 0.03 0.51612 0.045 0.77419l3.5039 1.758c-0.0173-0.26112-0.0346-0.52225-0.0519-0.78337-0.13968-1.801-0.35369-3.5892-0.57016-5.3817 0.012-1.6265 0.0454-3.261-0.19887-4.8746-0.70437-4.6648-1.9691-9.2236-3.2028-13.77-4.581-16.731-8.4578-33.639-12.178-50.579-2.435-10.891-4.8728-21.782-7.3562-32.661-0.43821-1.9198-2.1626-9.1303-2.7148-11.758-0.15561-0.74046-0.26377-1.4901-0.39565-2.2352l-3.5262-1.7967z" fill="none" stroke-width=".26458"/>
<path d="m44.642 123.85c-0.06551-1.2431-0.38146-2.5348-0.14157-3.7792 0.23574-1.2228 0.96659-2.8662 1.3951-3.9484 2.1598-4.841 4.6508-9.5262 7.082-14.235l-3.3162-1.8883c-2.3139 4.7796-4.7526 9.4974-7.0345 14.292-0.44718 1.0351-1.2865 2.8053-1.5643 3.9952-0.29208 1.2513 0.01662 2.5448 0.03782 3.8034l3.5417 1.7596z" fill="none" stroke-width=".26458"/>
<path d="m28.193 155.64c-0.24759-0.11918-0.49574-0.23718-0.74276-0.35754-0.48806-0.2378-1.6841-0.82614-2.1371-1.0644-0.45729-0.24049-1.792-1.0266-1.3615-0.74091 0.56392 0.37425 1.0866 1.0333 1.7629 1.0073 0.63513-0.0244-1.077-0.67533-1.6155-1.013-0.20989-0.14349-3.2414-2.1745-3.3039-2.3917-0.4591-1.5952 1.4898-6.1058 1.9013-7.1072 0.03477-0.0846 3.3361-7.42 3.4669-7.7107 1.6071-3.5622 2.9812-7.2732 3.5463-11.158 0.23754-1.6333 0.2269-2.4968 0.2862-4.1235 0.05413-2.9942-0.31555-5.9727-0.5091-8.9566-0.03709-2.4577-0.36153-4.948-0.10843-7.4045 0.07774-0.75449 0.23437-1.4988 0.35155-2.2481 0.87165-4.5325 2.0738-8.99 2.9137-13.528 0.45739-2.6749 0.66019-5.3821 0.72652-8.092 0.03252-2.0975 0.0051-4.1952 0.0079-6.2928 0.0073-1.8375-0.04041-3.676 0.03051-5.5124 0.19036-2.594 1.6221-4.724 3.0586-6.8003 0.72983-0.96692 0.99569-1.4117 1.9264-2.2419 2.1903-1.9538 5.2454-3.2833 7.8714-4.5415 3.6472-1.7025 7.4053-3.1551 11.185-4.5348 2.5164-0.95397 5.0913-1.7188 7.6965-2.3837 1.8815-0.52037 3.7267-1.1434 5.6495-1.5003 1.7807-0.21944 3.5669-0.37093 5.3367-0.67384 2.1761-0.39298 4.3847-0.54831 6.5839-0.75543 2.4482-0.22203 4.9073-0.26797 7.3639-0.30034 2.48-0.02746 4.96-0.01667 7.4401-0.02027 2.4-0.01648 4.7407 0.543 7.0582 1.1041 1.8004 0.52722 3.5506 1.1971 5.2699 1.9442 2.1286 0.9132 4.2794 1.8046 6.2892 2.961-0.71362-0.41059-1.4214-0.83156-2.1409-1.2318-0.42809-0.23812 0.8467 0.49302 1.2665 0.74542 1.8879 1.135 3.7089 2.3527 5.4763 3.6664 3.1318 2.55 6.1549 5.2298 9.0834 8.0099 2.422 2.3234 4.7984 4.6925 7.0312 7.1992 1.6078 1.9138 3.1454 3.8838 4.7425 5.8066 1.6837 1.9181 3.2436 3.9324 4.7938 5.9578 2.6595 3.2165 5.2218 6.5128 7.6235 9.9263 2.6992 3.7737 4.8976 7.8646 7.0165 11.982 1.6522 3.3647 3.4035 6.7208 4.6842 10.253 0.27817 0.76714 0.50901 1.5506 0.76352 2.326 1.1933 3.8616 1.5981 7.8893 2.1338 11.876 0.36033 2.682 0.73438 5.3621 1.096 8.0439 1.0654 7.8382 1.3801 15.743 1.7607 23.634 0.0353 0.68859 0.0705 1.3772 0.10576 2.0658l3.3851 1.6975c-0.054-0.69726-0.10792-1.3945-0.16188-2.0918-0.55574-7.9145-0.91629-15.848-1.8897-23.728-0.34053-2.6685-0.69017-5.3358-1.0225-8.0053-0.49682-3.9914-0.87717-8.0189-2.0155-11.895-0.24471-0.78029-0.46187-1.5698-0.73411-2.3409-0.74928-2.1223-1.7351-4.1609-2.6814-6.199-0.31959-0.68836-0.62255-1.3846-0.95444-2.0671-0.33064-0.67994-0.68849-1.3463-1.0327-2.0194-2.1308-4.1241-4.3007-8.2476-7.0061-12.032-2.3559-3.418-4.9106-6.696-7.5398-9.9079-1.5405-2.0279-3.0593-4.0687-4.7667-5.9631-1.5939-1.9309-3.1503-3.8907-4.744-5.8217-2.243-2.5338-4.645-4.9164-7.0877-7.2571-2.9136-2.7906-5.9368-5.459-9.0388-8.0391-3.4954-2.6772-7.3225-4.8641-11.154-7.0207-2.0453-1.1218-4.1986-2.0334-6.342-2.9506-1.7298-0.73521-3.4905-1.3973-5.3073-1.8876-2.3303-0.53929-4.6832-1.0538-7.0901-1.0155-2.483-0.0058-4.9662-0.0043-7.4491 0.02103-2.4642 0.04056-4.9311 0.09493-7.3865 0.32196-2.2083 0.20902-4.4254 0.36841-6.6097 0.77014-1.7805 0.28223-3.5793 0.39895-5.3607 0.67153-1.9135 0.39574-3.7571 1.0331-5.6441 1.5327-2.5952 0.68638-5.1527 1.5-7.6635 2.4523-3.7653 1.401-7.5007 2.8879-11.131 4.6137-3.6828 1.7723-7.6285 3.3834-9.9955 6.8926-1.4658 2.1399-2.9742 4.3003-3.2101 6.9629-0.10048 1.8417-0.02709 3.6865-0.03877 5.5303 0.019 2.0964 0.02318 4.193 0.0071 6.2894-0.04996 2.7022-0.18976 5.4062-0.62477 8.0778-0.7831 4.5544-1.9461 9.026-2.88 13.55-0.13689 0.7557-0.31344 1.5053-0.41067 2.2671-0.31363 2.4572-0.0024 4.9584 0.04345 7.4205 0.18639 2.9852 0.57506 5.9592 0.5817 8.953-0.03825 1.5568-0.02342 2.531-0.22538 4.0929-0.50143 3.8778-1.7947 7.5948-3.3539 11.163-1.1344 2.5868-2.3429 5.1412-3.453 7.7385-0.43813 1.0252-2.6216 5.8862-2.3055 7.4362 0.04384 0.21502 3.0763 2.2809 3.2716 2.4168 3.4556 2.21 7.0232 4.2456 10.728 6.0091l-3.0866-2.4623z" fill="none" stroke-width=".26458"/>
<path d="m168.54 154.3c-0.5231-5.9741-1.1424-11.942-2.1052-17.863-0.31498-1.9374-0.68651-3.8653-1.0298-5.7979-0.91432-5.5723-2.5251-10.969-4.3567-16.297-1.4702-4.2766-2.2918-6.6202-4.1998-10.752-0.84259-1.8248-1.7945-3.5972-2.6917-5.3957-0.99119-1.7466-1.9491-3.5125-2.9736-5.2398-0.96942-1.6345-2.1263-3.1596-3.0069-4.8436-2.3182-4.4329-3.4754-9.3231-5.2265-13.974-0.50863-1.3508-1.1138-2.6632-1.6707-3.9948-1.8823-4.339-4.4347-8.3312-7.5622-11.876-1.665-1.8871-2.3461-2.4427-4.1576-4.1323-3.1697-2.7842-6.6759-5.1433-10.28-7.3208-3.2627-1.924-6.5653-3.867-10.143-5.1643-2.74-0.99342-3.582-1.1196-6.4979-1.8503-1.4367-0.23039-2.8594-0.57966-4.3102-0.69117-3.3479-0.25732-8.1786 0.02994-11.459 0.31434-4.294 0.37233-7.9968 0.89916-12.239 1.656-1.9404 0.34613-3.8666 0.76735-5.7999 1.151-2.2326 1.7898-4.6412 3.3798-6.6977 5.3694-3.9926 3.8627-9.6071 11.052-12.251 15.883-1.9054 3.481-3.3865 7.1846-4.8329 10.88-3.0563 7.808-4.5987 13.907-6.8724 21.892-0.76521 3.0951-1.7418 6.1454-2.2956 9.2852-0.62899 3.5659-0.91441 7.1854-1.2456 10.791-0.96844 10.542-1.1115 21.138-1.154 31.716-0.15742 3.957 0.22663 7.9643-0.23348 11.91-0.01969 0.0982-0.08246 0.19731-0.05906 0.29474 0.41211 1.7154 0.91328 3.4082 1.3588 5.1153 0.59455 2.2784 1.1843 4.558 1.7613 6.8408 1.4278 5.6488 1.9195 7.757 3.2519 13.293l3.0081 1.4426c-1.0053-4.0216-2.341-9.3296-3.2989-13.316-0.7453-3.1015-1.9598-8.1549-2.579-11.512-0.02056-0.11146 0.03641-0.22374 0.05461-0.33561 0.28292-4.0505-0.25383-8.1271-0.20452-12.178-0.24065-10.64-0.34257-21.315 0.65579-31.927 0.33674-3.5792 0.72213-7.16 1.3422-10.701 0.55138-3.1489 1.445-6.2281 2.1675-9.3422 0.96444-3.5198 1.8157-7.0725 2.8933-10.559 2.2644-7.3268 5.0566-15.367 8.8245-22.096 2.7329-4.8811 8.1998-11.88 12.352-15.71 2.0898-1.9276 4.5607-3.3959 6.8411-5.0939 1.9228-0.38552 3.8378-0.81241 5.7685-1.1566 4.0647-0.72459 8.1131-1.2913 12.23-1.621 3.5461-0.28395 7.968-0.48843 11.55-0.15132 1.467 0.13807 2.9027 0.50853 4.3541 0.76279 1.1748 0.30889 2.3608 0.57821 3.5246 0.92666 2.073 0.62072 3.4351 1.1616 5.3584 2.0271 0.62443 0.281 1.2392 0.58324 1.8515 0.88976 0.48388 0.24223 1.8705 1.0794 1.4365 0.7562-0.6198-0.46165-1.3325-0.78332-1.9987-1.175 3.6536 2.1691 7.2114 4.5193 10.435 7.2988 1.8333 1.6764 2.5228 2.2282 4.2117 4.1027 3.1722 3.5207 5.7703 7.4977 7.7092 11.824 0.56583 1.3266 1.1792 2.6339 1.6975 3.9798 1.7806 4.6237 3.0009 9.6936 5.3059 14.097 0.88414 1.6891 2.0627 3.2077 3.0414 4.8438 1.0291 1.7202 1.9873 3.482 2.9809 5.223 0.89536 1.7901 1.8458 3.5537 2.6861 5.3702 1.9022 4.1123 2.7218 6.4605 4.1917 10.718 1.8359 5.3178 3.4542 10.703 4.3989 16.261 0.33551 1.9244 0.70901 3.8425 1.0065 5.7731 0.89815 5.8282 1.41 11.72 1.6632 17.609l3.5202 1.7693z" fill="none" stroke-width=".26458"/>
<path d="m37.749 179.87c0.06243-0.62135 0.09457-1.2465 0.1873-1.8641 0.49874-3.3215 1.2327-6.6048 1.7375-9.9254 1.5573-10.245 2.6358-20.553 3.699-30.857 1.0426-10.907 1.6437-21.85 2.1729-32.792 0.14646-3.028 0.30561-6.0557 0.40902-9.0854 0.19002-5.5676 0.18257-9.3114 0.2207-14.788-0.0031-4.8475-0.12763-9.7161 0.31482-14.552 0.1407-1.5378 0.49469-4.2039 1.0043-5.7442 0.2382-0.72002 0.63136-1.3792 0.94703-2.0687 0.44265-0.55669 0.81016-1.1825 1.328-1.6701 1.2083-1.1378 2.9875-2.0394 4.4675-2.6996 3.0075-1.3416 5.9731-1.967 9.1757-2.635 5.6309-0.89302 11.431-1.6969 17.111-0.68356 1.1654 0.20792 2.2997 0.56277 3.4496 0.84416 2.7792 1.0896 5.1147 1.8466 7.6454 3.5248 0.63435 0.42066 1.0502 1.1045 1.6194 1.6098 1.6077 1.4271 3.332 2.7218 4.9076 4.1842 4.6253 4.293 6.1788 6.3327 10.419 11.172 13.562 16.98 23.308 36.488 33.093 55.769 7.9658 15.905 15.653 31.968 22.343 48.458 1.1339 2.7951 2.2016 5.6166 3.3024 8.4248 3.5807 9.3005 6.536 18.827 8.9402 28.495l3.2631 1.5592c-2.6532-9.7378-5.7384-19.36-9.4162-28.763-1.121-2.8201-2.2107-5.6529-3.3632-8.4603-6.7801-16.516-14.502-32.624-22.528-48.566-5.2527-10.362-10.391-20.815-16.203-30.88-4.966-8.6-10.425-16.941-16.501-24.799-1.7399-2.0137-3.4189-4.0817-5.2197-6.0412-6.0954-6.6325-13.121-12.701-21.401-16.442-1.2326-0.55692-2.5266-0.96662-3.79-1.4499-1.1617-0.27107-2.3089-0.61384-3.485-0.8132-5.7089-0.96774-11.521-0.13709-17.172 0.78016-3.2651 0.67899-6.2283 1.2957-9.2891 2.6752-1.5531 0.7-3.3529 1.5989-4.6115 2.8022-0.53545 0.51196-0.90788 1.1709-1.3618 1.7564-0.31718 0.71799-0.71541 1.4054-0.95154 2.154-0.50484 1.6004-0.80026 4.2601-0.91527 5.86-0.35166 4.8917-0.14272 9.8058-0.06242 14.701 0.05253 5.9263 0.11755 8.7937-0.0069 14.883-0.28628 14.006-1.12 28.004-2.392 41.953-0.96474 8.9736-1.2621 12.664-2.5956 21.504-0.45842 3.0391-0.97725 6.0694-1.5411 9.0908-1.1467 6.1447-1.0634 4.6731-2.1317 9.7387-0.12938 0.61352-0.21566 1.2354-0.32348 1.853l3.5053 1.786z" fill="none" stroke-width=".26458"/>
<path d="m43.98 164.12c0.46317-2.3065 0.85152-4.1065 1.1786-6.5304 0.29257-2.1682 0.51542-4.3454 0.74446-6.5213 0.64085-6.0878 0.99884-10.104 1.3735-16.304 0.19607-3.2448 0.32304-6.4935 0.48457-9.7402 0.38506-8.6174 0.70451-17.238 0.97239-25.86 0.16123-5.1894 0.24565-10.373 0.52264-15.558 0.34128-5.1724 1.0975-10.303 1.9333-15.414 0.69223-3.7005 1.3929-7.4215 2.4537-11.039 0.22689-0.77377 0.49631-1.5344 0.74446-2.3016 1.2145-3.4246 2.7021-6.7542 4.7143-9.7888 1.516-2.2863 2.0088-2.7949 3.7356-4.9373 3.4948-4.1061 7.6873-7.4234 12.259-10.24 1.465-0.79898 2.8908-1.6864 4.4371-2.3268 1.2467-0.51627 2.5417-0.86771 3.8469-1.195 2.8827-0.59483 5.8382-0.60975 8.7687-0.65736 2.2434 0.05149 4.5023-0.12622 6.7434 0.04003 1.2327 0.09144 2.54 0.32729 3.7558 0.52059 4.1684 0.83658 8.1692 2.2468 12.07 3.9122 0.58819 0.30231 1.1819 0.59419 1.7646 0.90694 0.50607 0.27161-1.7937-1.2961-1.5346-0.78351 0.32339 0.63986 1.1849 0.80801 1.762 1.2334 0.61598 0.4541 1.2224 0.92162 1.8162 1.4044 1.7515 1.4241 2.7786 2.3778 4.4738 3.8916 3.7952 3.5127 7.4974 7.1313 11.112 10.83 2.4662 2.5599 4.7249 5.3252 6.8481 8.1743 2.001 2.8554 3.8624 5.8118 5.4385 8.9231 1.5528 3.1642 2.62 6.5317 3.6877 9.8815 1.3042 3.9698 2.1551 8.0572 3.0786 12.125 1.7747 7.5952 3.2176 15.261 4.7017 22.917 1.0595 5.5466 1.7761 11.15 2.6385 16.728 0.37965 2.4559 0.89361 5.4485 1.309 7.9074 1.1569 6.8095 2.3794 13.606 3.3511 20.445 0.78192 5.2023 1.1799 10.449 1.3932 15.702 0.0617 2.6317 0.16557 5.2692 0.0457 7.9007-0.0466 0.31032-0.037 0.63444-0.13969 0.93098-0.61706 1.7828-3.0327 2.7223-4.5944 3.3655-3.5671 1.3173-7.338 1.8814-11.06 2.5678-4.2242 0.74506-8.4791 1.3148-12.742 1.786-6.0357 0.61035-12.107 0.6749-18.167 0.75989-1.2545 8e-3 -2.509 0.0243-3.7635 0.0228-2.9648-4e-3 -5.1654-0.0208-8.148-0.21105-5.3601-0.34195-10.688-1.052-16.018-1.6922-6.7071-0.8856-13.436-1.6404-20.112-2.7516-2.5398-0.42276-4.5369-0.82675-7.0422-1.3134-5.8884-1.25-11.691-2.9227-17.268-5.193-1.3314-0.61432-2.2375-1.0065-3.5081-1.6838-0.44379-0.23656-1.7541-0.98449-1.3107-0.74711 0.75367 0.40352 1.4737 0.87049 2.2419 1.2456 0.58028 0.28339-1.0732-0.71924-1.5945-1.1004-1.5524-1.1433-1.6515-2.6323-1.8252-4.4307-0.15196-2.5299-0.08868-5.0854 0.28941-7.5932 0.31026-1.4402 0.53515-2.8882 0.65018-4.3562 0.07187-0.96977 0.08864-1.9421 0.08863-2.9142-0.07715-1.2641 0.07354-1.8843 0.73084-2.9714 0.46575-0.71753 1.0317-1.353 1.654-1.9357l-3.37-2.0756c-0.63339 0.61779-1.2034 1.2938-1.6865 2.0371-0.66291 1.0907-0.9546 1.8624-0.85118 3.1499-0.0028 0.96647-0.0011 1.9336-0.05716 2.8988-0.09781 1.4639-0.31502 2.9088-0.60304 4.3476-0.37345 2.5377-0.40074 5.1202-0.31951 7.6802 0.13436 1.7483 0.17012 3.5523 1.6663 4.7196 3.2773 2.489 7.0025 4.373 10.749 6.0451 5.5821 2.2036 11.367 3.8614 17.243 5.0832 2.6125 0.48709 4.304 0.81959 6.969 1.2411 6.6496 1.0518 13.347 1.7722 20.018 2.6683 5.37 0.6417 10.74 1.3814 16.139 1.7486 2.9414 0.20012 5.2724 0.22289 8.2005 0.22731 1.2546 2e-3 2.5092-0.0163 3.7637-0.0245 6.1015-0.0436 12.215-0.0903 18.291-0.71563 4.2803-0.46102 8.5572-0.99066 12.79-1.7841 3.7605-0.66576 7.5594-1.2733 11.158-2.5996 1.7816-0.74184 4.1174-1.6743 4.8466-3.6761 0.11211-0.30773 0.10513-0.64653 0.15769-0.9698 0.12162-2.6576-0.0428-5.3221-0.12029-7.979-0.28912-5.2778-0.70025-10.553-1.4807-15.784-0.96218-6.8597-2.2785-13.661-3.421-20.491-1.4246-8.2132-2.5241-16.478-4.0214-24.679-1.4398-7.6215-2.819-15.257-4.4968-22.831-0.90124-4.0661-1.6736-8.1618-2.9972-12.122-1.0531-3.3649-2.1206-6.7438-3.6482-9.9298-1.5553-3.1433-3.4334-6.1117-5.432-8.9915-2.0982-2.8799-4.3686-5.6563-6.8366-8.2271-3.6462-3.7175-7.3984-7.336-11.2-10.893-1.3715-1.2365-2.9666-2.7012-4.393-3.8865-3.1279-2.5993-6.6108-4.7658-10.283-6.5107-3.9233-1.6378-7.9423-3.0306-12.127-3.8398-1.4265-0.22156-2.3802-0.40321-3.8091-0.49955-2.2458-0.15142-4.5045 0.02011-6.7521-0.02601-2.9613 0.03894-5.9499 0.06281-8.8552 0.70834-1.3162 0.3498-2.6271 0.7166-3.8793 1.2626-1.5333 0.66856-2.9362 1.5947-4.3918 2.4082-4.544 2.8818-8.7611 6.2666-12.245 10.395-1.6801 2.0812-2.2952 2.7471-3.7792 4.9649-2.0404 3.0493-3.5537 6.4001-4.8005 9.8422-0.25447 0.77186-0.5306 1.5369-0.76341 2.3156-1.0831 3.6226-1.7626 7.356-2.4911 11.06-0.84741 5.1496-1.5047 10.334-1.7699 15.549-0.16126 5.2406-0.14239 10.478-0.21762 15.721-0.1242 8.6549-0.34428 17.309-0.7672 25.955-0.64297 10.784-1.2641 21.595-3.0924 32.26-0.46702 2.724-0.8066 3.9127-1.4289 6.3629l3.4102 1.852z" fill="none" stroke-width=".26458"/>
<path transform="scale(.26458)" d="m0 776.59v-345.23h794.66v690.46h-794.66z" fill="none" stroke-width="1.3893"/>
<path d="m5.1046 118.92 96.561-118.2 105.27 120.07-105.2-96.192z" fill="#ffd880" stroke-width=".29588"/>
<text x="67.497261" y="237.16435" fill="#ffd880" font-family="Arimo" font-size="105.83px" stroke-width=".26458" xml:space="preserve"><tspan x="67.497261" y="237.16435" fill="#ffd880" font-size="105.83px" stroke-width=".26458">B</tspan></text>
<path d="m200.87 113.84-1.598-3e-3 7.5815 7.6029 0.17768-6.3156z" fill="#5fbcd3" stroke-width=".26458"/>
<path d="m9.2412 113.85 1.0983-5e-3 -5.7747 5.9928-0.10654-2.1706z" fill="#5fbcd3" stroke-width=".26458"/>
<script type="text/javascript">!function(){const t="http://www.w3.org/2000/svg",e="http://www.w3.org/1999/xlink",s="http://www.w3.org/1999/xhtml",r=2;if(document.createElementNS(t,"meshgradient").x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case"translate":2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error("mesh.js: translate does not have 2 arguments!"),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case"scale":1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error("mesh.js: scale does not have 1 or 2 arguments!"),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case"rotate":if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error("math.js: No argument to rotate transform!");3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case"skewX":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error("math.js: No argument to skewX transform!");break;case"skewY":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error("math.js: No argument to skewY transform!");break;case"matrix":6===l.length?h=h.append(new g(...l)):console.error("math.js: Incorrect number of arguments for matrix!");break;default:console.error("mesh.js: Unhandled transform type: "+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error("mesh.js: argument to Affine.append is not affine!");let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute("type")||"bilinear"}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute("x")),n=Number(t.getAttribute("y"));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute("path"),c="l";null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case"l":0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"L":0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"c":0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case"C":0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error("mesh.js: "+c+" invalid path type.")}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if("bilinear"===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll("rect,circle,ellipse,path,text").forEach((r,n)=&gt;{let o=r.getAttribute("id");o||(o="patchjs_shape"+n,r.setAttribute("id",o));const i=r.style.fill.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/),a=r.style.stroke.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;"meshgradient"===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,"canvas");d(l,{width:i.width,height:i.height});const c=l.getContext("2d");let u=c.createImageData(i.width,i.height);const f=new b(a);"objectBoundingBox"===a.getAttribute("gradientUnits")&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute("gradientTransform");null!=p&amp;&amp;f.transform(h(p)),"userSpaceOnUse"===a.getAttribute("gradientUnits")&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,"image");d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,"xlink:href",g),r.parentNode.insertBefore(y,r),r.style.fill="none";const w=document.createElementNS(t,"use");w.setAttributeNS(e,"xlink:href","#"+o);const m="patchjs_clip"+n,M=document.createElementNS(t,"clipPath");M.setAttribute("id",m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute("clip-path","url(#"+m+")"),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;"meshgradient"===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute("stroke-miterlimit"))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,"canvas");d(p,{width:l,height:c});const y=p.getContext("2d");let g=y.createImageData(l,c);const w=new b(o);"objectBoundingBox"===o.getAttribute("gradientUnits")&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute("gradientTransform");null!=m&amp;&amp;w.transform(h(m)),"userSpaceOnUse"===o.getAttribute("gradientUnits")&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,"image");d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,"xlink:href",S);const k="pattern_clip"+n,A=document.createElementNS(t,"pattern");d(A,{id:k,patternUnits:"userSpaceOnUse",width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke="url(#"+k+")",g=null,p=null,S=null}}})}();</script>
</svg>
